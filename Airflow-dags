from airflow import DAG
from datetime import timedelta, datetime
from airflow.providers.http.sensors.http import HttpSensor
import json
from airflow.providers.http.operators.http import SimpleHttpOperator
from airflow.operators.python import PythonOperator
import pandas as pd




def transform_load_data(task_instance):
    data = task_instance.xcom_pull(task_ids="extract_weather_data")
    longitude=data['coord']['lon']
    latitude=data['coord']['lat']
    temperature=round(data['main']['temp'] -273, 2)
    feels_like=round(data['main']['feels_like'] -273, 2)
    temp_min=round(data['main']['temp_min'] -273, 2)
    temp_max=round(data['main']['temp_max'] -273, 2)
    pressure=data['main']['pressure']
    humidity=data['main']['humidity']
    visibility=data['visibility']
    wind_speed=data['wind']['speed']
    sunrise=data['sys']['sunrise']
    sunset=data['sys']['sunset']
    timezone=data['timezone']
    city=data['name']

    transformed_data = {'city':city,
    'longitude':longitude, 
    'latitude':latitude, 
    'temperature':temperature, 
    'feels_like':feels_like, 
    'temp_min':temp_min, 
    'temp_max':temp_max, 
    'pressure':pressure,
    'visibility':visibility,
    'humidity':humidity,
    'wind_speed':wind_speed,
    'sunrise':sunrise,
    'sunset':sunset,
    'timezone':timezone
    }

    transformed_data_list = [transformed_data]
    df_data = pd.DataFrame(transformed_data_list)

    aws_credentials = {"key": "XXXXXXXXXX", "secret": "XXXXXXXXXX", "token": "XXXXXXXXXXXXXXXX"}


    now = datetime.now()
    dt_string = now.strftime("%d%m%Y%H%M%S")
    dt_string = 'current_weather_data_varanasi_' + dt_string
    df_data.to_csv(f"s3://weather-in-varanasi/{dt_string}.csv", index=False, storage_options=aws_credentials)



default_args = {
    'owner': 'airflow',
    'depends_on_past': False,
    'start_date': datetime(2024,1,3), # please look in case of any error
    'email': ['airflow@example.com'],
    'email_on_failure': False,
    'email_on_retry': False,
    'retries': 0,
    'retry_delay': timedelta(minutes=2)

}


with DAG('weather_dag',
    default_args=default_args,
    description='Varanasi Weather',
    schedule_interval='@daily',
    catchup = False) as dag:

    is_weather_api_ready = HttpSensor(
    task_id = "is_weather_api_ready",
    http_conn_id = "weathermap_api",
    endpoint= "/data/2.5/weather?q=Varanasi,IN&appid=XXXXXXXXXXXXXXXXXXXX",
    )


    extract_weather_data = SimpleHttpOperator(
    task_id = 'extract_weather_data',
    http_conn_id = 'weathermap_api',
    endpoint= "/data/2.5/weather?q=Varanasi,IN&appid=XXXXXXXXXXXXXXX",
    method = 'GET',
    response_filter= lambda r: json.loads(r.text),
    log_response=True
    )


    transform_load_weather_data = PythonOperator(
    task_id= 'transform_load_weather_data',
    python_callable=transform_load_data
    )



    is_weather_api_ready >> extract_weather_data >> transform_load_weather_data

